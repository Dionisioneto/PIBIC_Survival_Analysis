sim.cure.icen = function(N, prob.ber, betas.cure, betas.risk,
c1, c2){
## Armazenameto de dados
survival.time = rep(NA, N)
L = rep(NA, N)
R = rep(NA, N)
delta = rep(NA, N)
## geracao dos dados
x2 = rnorm(n = N, mean = 0, sd = 1)
x1 = rbinom(n = N, size = 1, prob = prob.ber)
matriz = cbind(rep(1, N), x1, x2)
b = betas.cure
z = b[1] + b[2]*x1 + b[3]*x2
prob.z = 1/(1+exp(-z))
Y = rbinom(N,1,prob.z)
## Proporcao de censuras
A = rexp(n = N, rate = 1)
C = cbind(c1,c2*A)
C = pmin(C[,1], C[,2])
##------
for(i in 1:N){
if(Y[i] == 0){
survival.time[i] = C[i]
delta[i] = 0
}
else{
survival.time[i] = exp(matriz[i,-1] %*% betas.risk)
delta[i] = ifelse(survival.time[i] <= C[i], 1, 0)
}
if(delta[i] == 0){
L[i] = C[i]
R[i] = Inf
}
else{
L[i] = 0
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = Qj
check = (L[i] <= survival.time[i] & survival.time[i] < R[i])
while(!check){
L[i] = L[i] + Qj
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = R[i] + Qj
check = (L[i] <= survival.time[i] & survival.time[i] < R[i])
}
}
}
data = data.frame(time = survival.time, L = L, R = R,
delta = delta, risk = Y, X1 = matriz[,2], X2 = matriz[,3])
return(data)
}
dados = sim.cure.icen(N = 100, prob.ber = 0.5, betas.cure = c(1,0.5,1.2),
betas.risk = c(0.5,0.3), c1 = 4, c2 = 7)
dados.cens = Surv(dados$time, dados$delta)
km = survfit(dados.cens~1)
dados(head)
library(survival)
dados.cens = Surv(dados$time, dados$delta)
km = survfit(dados.cens~1)
plot(km)
dados = sim.cure.icen(N = 100, prob.ber = 0.5, betas.cure = c(1,0.5,1.2),
betas.risk = c(0.5,-0.3), c1 = 4, c2 = 7)
dados.cens = Surv(dados$time, dados$delta)
km = survfit(dados.cens~1)
plot(km)
dados = sim.cure.icen(N = 100, prob.ber = 0.5, betas.cure = c(1,0.5,1.2),
betas.risk = c(0.5,0.3), c1 = 4, c2 = 7)
dados.cens = Surv(dados$time, dados$delta)
km = survfit(dados.cens~1)
plot(km)
head(dados)
sim.cure.icen = function(N, prob.ber, betas.cure, betas.risk,
c1, c2){
## Armazenameto de dados
survival.time = rep(NA, N)
L = rep(NA, N)
R = rep(NA, N)
delta = rep(NA, N)
## geracao dos dados
x2 = rnorm(n = N, mean = 0, sd = 1)
x1 = rbinom(n = N, size = 1, prob = prob.ber)
matriz = cbind(rep(1, N), x1, x2)
b = betas.cure
z = b[1] + b[2]*x1 + b[3]*x2
prob.z = 1/(1+exp(-z))
Y = rbinom(N,1,prob.z)
## Proporcao de censuras
A = rexp(n = N, rate = 1)
C = cbind(c1,c2*A)
C = pmin(C[,1], C[,2])
##------
for(i in 1:N){
if(Y[i] == 0){
survival.time[i] = C[i]
delta[i] = 0
}
else{
survival.time[i] = exp(matriz[i,-1] %*% betas.risk)
delta[i] = ifelse(survival.time[i] <= C[i], 1, 0)
}
if(delta[i] == 0){
L[i] = C[i]
R[i] = Inf
}
else{
L[i] = 0
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = Qj
check = (L[i] >= survival.time[i] & survival.time[i] < R[i])
while(!check){
L[i] = L[i] + Qj
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = R[i] + Qj
check = (L[i] >= survival.time[i] & survival.time[i] < R[i])
}
}
}
data = data.frame(time = survival.time, L = L, R = R,
delta = delta, risk = Y,
X1 = matriz[,2], X2 = matriz[,3])
return(data)
}
dados = sim.cure.icen(N = 100, prob.ber = 0.5, betas.cure = c(1,0.5,1.2),
betas.risk = c(0.5,0.3), c1 = 4, c2 = 7)
head(dados)
sim.cure.icen = function(N, prob.ber, betas.cure, betas.risk,
c1, c2){
## Armazenameto de dados
survival.time = rep(NA, N)
L = rep(NA, N)
R = rep(NA, N)
delta = rep(NA, N)
## geracao dos dados
x2 = rnorm(n = N, mean = 0, sd = 1)
x1 = rbinom(n = N, size = 1, prob = prob.ber)
matriz = cbind(rep(1, N), x1, x2)
b = betas.cure
z = b[1] + b[2]*x1 + b[3]*x2
prob.z = 1/(1+exp(-z))
Y = rbinom(N,1,prob.z)
## Proporcao de censuras
A = rexp(n = N, rate = 1)
C = cbind(c1,c2*A)
C = pmin(C[,1], C[,2])
##------
for(i in 1:N){
if(Y[i] == 0){
survival.time[i] = C[i]
delta[i] = 0
}
else{
survival.time[i] = exp(matriz[i,-1] %*% betas.risk)
delta[i] = ifelse(survival.time[i] <= C[i], 1, 0)
}
if(delta[i] == 0){
L[i] = C[i]
R[i] = Inf
}
else{
L[i] = 0
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = Qj
check = (L[i] <= survival.time[i] & survival.time[i] < R[i])
while(!check){
L[i] = L[i] + Qj
Qj = runif(1, min = 0.1, max = 0.5)
R[i] = R[i] + Qj
check = (L[i] <= survival.time[i] & survival.time[i] < R[i])
}
}
}
data = data.frame(time = survival.time, L = L, R = R,
delta = delta, risk = Y,
X1 = matriz[,2], X2 = matriz[,3])
return(data)
}
dados = sim.cure.icen(N = 100, prob.ber = 0.5, betas.cure = c(1,0.5,1.2),
betas.risk = c(0.5,0.3), c1 = 4, c2 = 7)
head(dados)
loglik.int.fc = function(par, time.l, time.r,
grid, delta, x.matriz){
b = length(grid) + 1 ## numero de intervalos
hazards = par[1:b] ## taxas de falha para os b intervalos
exp = par[b + 1] ## parametro de potencia
n.covars = dim(x.matrix)[2] ## numero de covariaveis
betas.cura = par[(b + 2):(b + 1 + n.covars)]
betas.risco = par[(b + 5):(b + 4 +(n.covars-1))]
## calculo da populacao curada
pi = exp(x.matriz %*% betas.cura)/(1 + exp(x.matriz %*% betas.cura))
## calculo da populacao nao-curada
## informacoes exponencial por partes Potencia (PPE) para esquerda
s0.tl = PPE(time = time.l[delta==1], cuts = grid, levels = hazards, alpha = exp, type = "survival")
## informacoes exponencial por partes Potencia (PPE) para direita
s0.tr = PPE(time = time.r[delta==1], cuts = grid, levels = hazards, alpha = exp, type = "survival")
## contribuicao das covariaveis
sl = s0.tl^exp((x.matrix[delta==1,-1] %*% betas.risco))
sr = s0.tr^exp((x.matrix[delta==1,-1] %*% betas.risco))
p1 = delta*(1-pi)*(sl - sr)
## contribuicao da censura
s0.tl = PPE(time = time.l[delta==0], cuts = grid, levels = hazards, alpha = exp, type = "survival")
sl = s0.tl^exp((x.matrix[delta==0,] %*% betas.risco))
p2 = (1-delta)*(pi + ((1-pi)*sl))
log.vero = log(p1 + p2)
return(-1*log.vero)
}
